/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Obligation}
 * @category Accounts
 * @category generated
 */
export type ObligationArgs = {
  version: number
  reserved0: number
  market: web3.PublicKey
  owner: web3.PublicKey
  reserved1: number[] /* size: 184 */
  cached: number[] /* size: 256 */
  collateral: number[] /* size: 2048 */
  loans: number[] /* size: 2048 */
}

export const obligationDiscriminator = [168, 206, 141, 106, 88, 76, 172, 167]
/**
 * Holds the data for the {@link Obligation} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Obligation implements ObligationArgs {
  private constructor(
    readonly version: number,
    readonly reserved0: number,
    readonly market: web3.PublicKey,
    readonly owner: web3.PublicKey,
    readonly reserved1: number[] /* size: 184 */,
    readonly cached: number[] /* size: 256 */,
    readonly collateral: number[] /* size: 2048 */,
    readonly loans: number[] /* size: 2048 */,
  ) {}

  /**
   * Creates a {@link Obligation} instance from the provided args.
   */
  static fromArgs(args: ObligationArgs) {
    return new Obligation(
      args.version,
      args.reserved0,
      args.market,
      args.owner,
      args.reserved1,
      args.cached,
      args.collateral,
      args.loans,
    )
  }

  /**
   * Deserializes the {@link Obligation} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [Obligation, number] {
    return Obligation.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Obligation} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Obligation> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Obligation account at ${address}`)
    }
    return Obligation.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'JPv1rCqrhagNNmJVM5J1he7msQ5ybtvE1nNuHpDHMNU',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, obligationBeet)
  }

  /**
   * Deserializes the {@link Obligation} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Obligation, number] {
    return obligationBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Obligation} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return obligationBeet.serialize({
      accountDiscriminator: obligationDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Obligation}
   */
  static get byteSize() {
    return obligationBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Obligation} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Obligation.byteSize,
      commitment,
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Obligation} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Obligation.byteSize
  }

  /**
   * Returns a readable version of {@link Obligation} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      version: this.version,
      reserved0: this.reserved0,
      market: this.market.toBase58(),
      owner: this.owner.toBase58(),
      reserved1: this.reserved1,
      cached: this.cached,
      collateral: this.collateral,
      loans: this.loans,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const obligationBeet = new beet.BeetStruct<
  Obligation,
  ObligationArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['version', beet.u32],
    ['reserved0', beet.u32],
    ['market', beetSolana.publicKey],
    ['owner', beetSolana.publicKey],
    ['reserved1', beet.uniformFixedSizeArray(beet.u8, 184)],
    ['cached', beet.uniformFixedSizeArray(beet.u8, 256)],
    ['collateral', beet.uniformFixedSizeArray(beet.u8, 2048)],
    ['loans', beet.uniformFixedSizeArray(beet.u8, 2048)],
  ],
  Obligation.fromArgs,
  'Obligation',
)
