/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Market}
 * @category Accounts
 * @category generated
 */
export type MarketArgs = {
  version: number
  quoteExponent: number
  quoteCurrency: number[] /* size: 15 */
  authorityBumpSeed: number[] /* size: 1 */
  authoritySeed: web3.PublicKey
  marketAuthority: web3.PublicKey
  owner: web3.PublicKey
  quoteTokenMint: web3.PublicKey
  flags: beet.bignum
  reserved: number[] /* size: 352 */
  reserves: number[] /* size: 12288 */
}

export const marketDiscriminator = [219, 190, 213, 55, 0, 227, 198, 154]
/**
 * Holds the data for the {@link Market} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Market implements MarketArgs {
  private constructor(
    readonly version: number,
    readonly quoteExponent: number,
    readonly quoteCurrency: number[] /* size: 15 */,
    readonly authorityBumpSeed: number[] /* size: 1 */,
    readonly authoritySeed: web3.PublicKey,
    readonly marketAuthority: web3.PublicKey,
    readonly owner: web3.PublicKey,
    readonly quoteTokenMint: web3.PublicKey,
    readonly flags: beet.bignum,
    readonly reserved: number[] /* size: 352 */,
    readonly reserves: number[] /* size: 12288 */,
  ) {}

  /**
   * Creates a {@link Market} instance from the provided args.
   */
  static fromArgs(args: MarketArgs) {
    return new Market(
      args.version,
      args.quoteExponent,
      args.quoteCurrency,
      args.authorityBumpSeed,
      args.authoritySeed,
      args.marketAuthority,
      args.owner,
      args.quoteTokenMint,
      args.flags,
      args.reserved,
      args.reserves,
    )
  }

  /**
   * Deserializes the {@link Market} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [Market, number] {
    return Market.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Market} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Market> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Market account at ${address}`)
    }
    return Market.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'JPv1rCqrhagNNmJVM5J1he7msQ5ybtvE1nNuHpDHMNU',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, marketBeet)
  }

  /**
   * Deserializes the {@link Market} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Market, number] {
    return marketBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Market} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return marketBeet.serialize({
      accountDiscriminator: marketDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Market}
   */
  static get byteSize() {
    return marketBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Market} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Market.byteSize,
      commitment,
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Market} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Market.byteSize
  }

  /**
   * Returns a readable version of {@link Market} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      version: this.version,
      quoteExponent: this.quoteExponent,
      quoteCurrency: this.quoteCurrency,
      authorityBumpSeed: this.authorityBumpSeed,
      authoritySeed: this.authoritySeed.toBase58(),
      marketAuthority: this.marketAuthority.toBase58(),
      owner: this.owner.toBase58(),
      quoteTokenMint: this.quoteTokenMint.toBase58(),
      flags: (() => {
        const x = <{ toNumber: () => number }>this.flags
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      reserved: this.reserved,
      reserves: this.reserves,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const marketBeet = new beet.BeetStruct<
  Market,
  MarketArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['version', beet.u32],
    ['quoteExponent', beet.i32],
    ['quoteCurrency', beet.uniformFixedSizeArray(beet.u8, 15)],
    ['authorityBumpSeed', beet.uniformFixedSizeArray(beet.u8, 1)],
    ['authoritySeed', beetSolana.publicKey],
    ['marketAuthority', beetSolana.publicKey],
    ['owner', beetSolana.publicKey],
    ['quoteTokenMint', beetSolana.publicKey],
    ['flags', beet.u64],
    ['reserved', beet.uniformFixedSizeArray(beet.u8, 352)],
    ['reserves', beet.uniformFixedSizeArray(beet.u8, 12288)],
  ],
  Market.fromArgs,
  'Market',
)
