/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { ReserveConfig, reserveConfigBeet } from '../types/ReserveConfig.js'

/**
 * @category Instructions
 * @category UpdateReserveConfig
 * @category generated
 */
export type UpdateReserveConfigInstructionArgs = {
  newConfig: ReserveConfig
}
/**
 * @category Instructions
 * @category UpdateReserveConfig
 * @category generated
 */
export const updateReserveConfigStruct = new beet.BeetArgsStruct<
  UpdateReserveConfigInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['newConfig', reserveConfigBeet],
  ],
  'UpdateReserveConfigInstructionArgs',
)
/**
 * Accounts required by the _updateReserveConfig_ instruction
 *
 * @property [] market
 * @property [_writable_] reserve
 * @property [**signer**] owner
 * @category Instructions
 * @category UpdateReserveConfig
 * @category generated
 */
export type UpdateReserveConfigInstructionAccounts = {
  market: web3.PublicKey
  reserve: web3.PublicKey
  owner: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateReserveConfigInstructionDiscriminator = [
  61, 148, 100, 70, 143, 107, 17, 13,
]

/**
 * Creates a _UpdateReserveConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateReserveConfig
 * @category generated
 */
export function createUpdateReserveConfigInstruction(
  accounts: UpdateReserveConfigInstructionAccounts,
  args: UpdateReserveConfigInstructionArgs,
  programId = new web3.PublicKey('JPv1rCqrhagNNmJVM5J1he7msQ5ybtvE1nNuHpDHMNU'),
) {
  const [data] = updateReserveConfigStruct.serialize({
    instructionDiscriminator: updateReserveConfigInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.market,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.reserve,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: false,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
