/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  InitReserveBumpSeeds,
  initReserveBumpSeedsBeet,
} from '../types/InitReserveBumpSeeds.js'
import { ReserveConfig, reserveConfigBeet } from '../types/ReserveConfig.js'

/**
 * @category Instructions
 * @category InitReserve
 * @category generated
 */
export type InitReserveInstructionArgs = {
  bump: InitReserveBumpSeeds
  config: ReserveConfig
}
/**
 * @category Instructions
 * @category InitReserve
 * @category generated
 */
export const initReserveStruct = new beet.BeetArgsStruct<
  InitReserveInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', initReserveBumpSeedsBeet],
    ['config', reserveConfigBeet],
  ],
  'InitReserveInstructionArgs',
)
/**
 * Accounts required by the _initReserve_ instruction
 *
 * @property [_writable_] market
 * @property [] marketAuthority
 * @property [_writable_] reserve
 * @property [_writable_] vault
 * @property [_writable_] feeNoteVault
 * @property [_writable_] dexSwapTokens
 * @property [_writable_] dexOpenOrders
 * @property [] dexMarket
 * @property [] tokenMint
 * @property [] dexProgram
 * @property [] oraclePrice
 * @property [] oracleProduct
 * @property [_writable_] depositNoteMint
 * @property [_writable_] loanNoteMint
 * @property [] quoteTokenMint
 * @property [**signer**] owner
 * @category Instructions
 * @category InitReserve
 * @category generated
 */
export type InitReserveInstructionAccounts = {
  market: web3.PublicKey
  marketAuthority: web3.PublicKey
  reserve: web3.PublicKey
  vault: web3.PublicKey
  feeNoteVault: web3.PublicKey
  dexSwapTokens: web3.PublicKey
  dexOpenOrders: web3.PublicKey
  dexMarket: web3.PublicKey
  tokenMint: web3.PublicKey
  tokenProgram?: web3.PublicKey
  dexProgram: web3.PublicKey
  oraclePrice: web3.PublicKey
  oracleProduct: web3.PublicKey
  depositNoteMint: web3.PublicKey
  loanNoteMint: web3.PublicKey
  quoteTokenMint: web3.PublicKey
  owner: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initReserveInstructionDiscriminator = [
  138, 245, 71, 225, 153, 4, 3, 43,
]

/**
 * Creates a _InitReserve_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitReserve
 * @category generated
 */
export function createInitReserveInstruction(
  accounts: InitReserveInstructionAccounts,
  args: InitReserveInstructionArgs,
  programId = new web3.PublicKey('JPv1rCqrhagNNmJVM5J1he7msQ5ybtvE1nNuHpDHMNU'),
) {
  const [data] = initReserveStruct.serialize({
    instructionDiscriminator: initReserveInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.marketAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.reserve,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.feeNoteVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.dexSwapTokens,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.dexOpenOrders,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.dexMarket,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.dexProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.oraclePrice,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.oracleProduct,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.depositNoteMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.loanNoteMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
