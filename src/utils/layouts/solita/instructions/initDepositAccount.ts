/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitDepositAccount
 * @category generated
 */
export type InitDepositAccountInstructionArgs = {
  bump: number
}
/**
 * @category Instructions
 * @category InitDepositAccount
 * @category generated
 */
export const initDepositAccountStruct = new beet.BeetArgsStruct<
  InitDepositAccountInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
  ],
  'InitDepositAccountInstructionArgs',
)
/**
 * Accounts required by the _initDepositAccount_ instruction
 *
 * @property [] market
 * @property [] marketAuthority
 * @property [] reserve
 * @property [] depositNoteMint
 * @property [_writable_, **signer**] depositor
 * @property [_writable_] depositAccount
 * @category Instructions
 * @category InitDepositAccount
 * @category generated
 */
export type InitDepositAccountInstructionAccounts = {
  market: web3.PublicKey
  marketAuthority: web3.PublicKey
  reserve: web3.PublicKey
  depositNoteMint: web3.PublicKey
  depositor: web3.PublicKey
  depositAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initDepositAccountInstructionDiscriminator = [
  136, 79, 202, 206, 211, 146, 182, 158,
]

/**
 * Creates a _InitDepositAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitDepositAccount
 * @category generated
 */
export function createInitDepositAccountInstruction(
  accounts: InitDepositAccountInstructionAccounts,
  args: InitDepositAccountInstructionArgs,
  programId = new web3.PublicKey('JPv1rCqrhagNNmJVM5J1he7msQ5ybtvE1nNuHpDHMNU'),
) {
  const [data] = initDepositAccountStruct.serialize({
    instructionDiscriminator: initDepositAccountInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.market,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.marketAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.reserve,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.depositNoteMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.depositor,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.depositAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
