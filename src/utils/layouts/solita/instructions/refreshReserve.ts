/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RefreshReserve
 * @category generated
 */
export const refreshReserveStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'RefreshReserveInstructionArgs',
)
/**
 * Accounts required by the _refreshReserve_ instruction
 *
 * @property [_writable_] market
 * @property [] marketAuthority
 * @property [_writable_] reserve
 * @property [_writable_] feeNoteVault
 * @property [_writable_] depositNoteMint
 * @property [] pythOraclePrice
 * @category Instructions
 * @category RefreshReserve
 * @category generated
 */
export type RefreshReserveInstructionAccounts = {
  market: web3.PublicKey
  marketAuthority: web3.PublicKey
  reserve: web3.PublicKey
  feeNoteVault: web3.PublicKey
  depositNoteMint: web3.PublicKey
  pythOraclePrice: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const refreshReserveInstructionDiscriminator = [
  2, 218, 138, 235, 79, 201, 25, 102,
]

/**
 * Creates a _RefreshReserve_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category RefreshReserve
 * @category generated
 */
export function createRefreshReserveInstruction(
  accounts: RefreshReserveInstructionAccounts,
  programId = new web3.PublicKey('JPv1rCqrhagNNmJVM5J1he7msQ5ybtvE1nNuHpDHMNU'),
) {
  const [data] = refreshReserveStruct.serialize({
    instructionDiscriminator: refreshReserveInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.marketAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.reserve,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.feeNoteVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.depositNoteMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.pythOraclePrice,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
